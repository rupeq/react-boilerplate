# Stage 1: Build
FROM node:22-alpine AS build

WORKDIR /app

RUN corepack enable && corepack prepare pnpm@latest --activate

COPY package.json pnpm-lock.yaml* .npmrc* ./
RUN pnpm install --frozen-lockfile --prod=false

COPY . .

RUN pnpm run build && \
	find . -name node_modules -exec rm -rf {} + && \
	rm -rf src .npmrc .env* docker-compose*

# Stage 2: Production
FROM nginxinc/nginx-unprivileged:alpine-slim

USER root

RUN apk --no-cache upgrade && \
	apk add --no-cache tzdata && \
	rm -rf /var/cache/apk/*

COPY --from=build /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
COPY security-headers.conf /etc/nginx/conf.d/

COPY certs/*.pem /etc/nginx/certs/
RUN \
	chmod 644 /etc/nginx/certs/cert.pem && \
	chmod 600 /etc/nginx/certs/key.pem && \
	chown nginx:nginx /etc/nginx/certs/*.pem

RUN \
	chown -R nginx:nginx /usr/share/nginx/html && \
	chmod -R 755 /usr/share/nginx/html && \
	chmod 644 /etc/nginx/conf.d/*.conf && \
	touch /var/run/nginx.pid && \
	chown nginx:nginx /var/run/nginx.pid

USER nginx

HEALTHCHECK --interval=30s --timeout=3s \
	CMD curl --fail https://localhost:443 || exit 1

EXPOSE 80 433

CMD ["nginx", "-g", "daemon off;"]
